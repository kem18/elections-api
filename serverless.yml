service: netvote-api

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-domain-manager

custom:
  customDomain:
    domainName: elections-${self:provider.stage}.netvote.io
    stage: ${self:provider.stage}
    basePath: ''
    certificateName: '*.netvote.io'
    createRoute53Record: false
    endpointType: 'regional'

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}

functions:
  createElection:
    handler: admin/election-create.create
    role: adminApiRole
    events:
      - http:
          path: admin/election
          method: post
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:us-east-1:891335278704:userpool/us-east-1_XGFVRW86R

  setElectionStatus:
    handler: admin/election-set-status.setStatus
    role: adminApiRole
    events:
      - http:
          path: admin/election/{id}/status
          method: post
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:us-east-1:891335278704:userpool/us-east-1_XGFVRW86R

  setElectionPublicJwt:
    handler: admin/election-set-jwt.set
    role: adminApiRole
    events:
      - http:
          path: admin/election/{id}/jwt
          method: post
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:us-east-1:891335278704:userpool/us-east-1_XGFVRW86R

  addVoterKeys:
    handler: admin/auth-keys.add
    role: adminApiRole
    events:
      - http:
          path: admin/election/{id}/keys
          method: post
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:us-east-1:891335278704:userpool/us-east-1_XGFVRW86R

  jobLookup:
    handler: admin/job-lookup.lookup
    role: adminApiRole
    events:
      - http:
          path: admin/job/{jobId}
          method: get
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:us-east-1:891335278704:userpool/us-east-1_XGFVRW86R

  getElection:
    handler: public/get-election.get
    role: publicApiRole
    events:
      - http:
          path: public/election/{id}
          method: get
          cors: true
  
  createVoterJwtToken:
    handler: vote/create-token.create
    role: voteAuthApiRole
    events:
      - http:
          path: public/election/{id}/auth
          method: post
          cors: true

  castVote:
    handler: vote/cast-vote.cast
    role: castVoteRole
    events:
      - http:
          path: public/election/{id}/vote
          method: post
          cors: true

  voteJobLookup:
    handler: vote/job-lookup.lookup
    role: voteJobLookupRole
    events:
      - http:
          path: public/job/{id}
          method: get
          cors: true

  publicTally:
    handler: public/tally-election.tally
    role: tallyElectionRole
    events:
      - http:
          path: public/election/{id}/results
          method: get
          cors: true

resources:
  Resources:
    adminApiRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /api/admin/
        RoleName: AdminApiRole_${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: adminApiPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                  - Effect: Allow 
                    Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    Resource: 
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                  - Effect: "Allow"
                    Action:
                      - "s3:PutObject"
                    Resource:
                      Fn::Join:
                        - ""
                        - - "arn:aws:s3:::"
                          - "Ref" : "ServerlessDeploymentBucket"
                  - Effect: Allow
                    Action:
                      - dynamodb:PutItem
                    Resource: "arn:aws:dynamodb:us-east-1:891335278704:table/voterKeys"
                  - Effect: Allow
                    Action:
                      - dynamodb:PutItem
                      - dynamodb:GetItem
                    Resource: "arn:aws:dynamodb:us-east-1:891335278704:table/asyncJobs"
                  - Effect: Allow
                    Action:
                      - dynamodb:UpdateItem
                      - dynamodb:GetItem
                    Resource: "arn:aws:dynamodb:us-east-1:891335278704:table/elections"
                  - Effect: Allow
                    Action:
                      - dynamodb:Query
                    Resource: "arn:aws:dynamodb:us-east-1:891335278704:table/votes"
                  - Effect: Allow
                    Action:
                      - lambda:InvokeFunction
                    Resource: "arn:aws:lambda:us-east-1:891335278704:function:election-*"
                  - Effect: Deny
                    Action:
                      - lambda:InvokeFunction
                    Resource: "arn:aws:lambda:us-east-1:891335278704:function:election-cast-vote"
                    
    publicApiRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /api/public/
        RoleName: PublicApiRole_${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: publicApiPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                  - Effect: Allow 
                    Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    Resource: 
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                  - Effect: "Allow"
                    Action:
                      - "s3:PutObject"
                    Resource:
                      Fn::Join:
                        - ""
                        - - "arn:aws:s3:::"
                          - "Ref" : "ServerlessDeploymentBucket"
                  - Effect: Allow
                    Action:
                      - dynamodb:GetItem
                    Resource: "arn:aws:dynamodb:us-east-1:891335278704:table/elections"

    voteAuthApiRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /api/vote/auth/
        RoleName: VoteAuthApiRole_${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: voteAuthApiPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                  - Effect: Allow 
                    Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    Resource: 
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                  - Effect: "Allow"
                    Action:
                      - "s3:PutObject"
                    Resource:
                      Fn::Join:
                        - ""
                        - - "arn:aws:s3:::"
                          - "Ref" : "ServerlessDeploymentBucket"
                  - Effect: Allow
                    Action:
                      - dynamodb:GetItem
                    Resource: "arn:aws:dynamodb:us-east-1:891335278704:table/elections"
                  - Effect: Allow
                    Action:
                      - dynamodb:GetItem
                    Resource: "arn:aws:dynamodb:us-east-1:891335278704:table/electionKeys"
                  - Effect: Allow
                    Action:
                      - dynamodb:GetItem
                    Resource: "arn:aws:dynamodb:us-east-1:891335278704:table/voterKeys"
                  - Effect: Allow
                    Action:
                      - kms:Decrypt
                    Resource: "arn:aws:kms:us-east-1:891335278704:key/994f296e-ce2c-4f2b-8cef-48d16644af09"
                  - Effect: Allow
                    Action:
                      - dynamodb:PutItem
                    Resource: "arn:aws:dynamodb:us-east-1:891335278704:table/authIds"

    voteJobLookupRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /api/vote/auth/
        RoleName: VoteJobLookupRole_${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: voteJobLookupPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                  - Effect: Allow 
                    Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    Resource: 
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                  - Effect: "Allow"
                    Action:
                      - "s3:PutObject"
                    Resource:
                      Fn::Join:
                        - ""
                        - - "arn:aws:s3:::"
                          - "Ref" : "ServerlessDeploymentBucket"
                  - Effect: Allow
                    Action:
                      - dynamodb:GetItem
                    Resource: "arn:aws:dynamodb:us-east-1:891335278704:table/asyncJobs"

    castVoteRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /api/vote/cast/
        RoleName: CastVoteRole_${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: castVotePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                  - Effect: Allow 
                    Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    Resource: 
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                  - Effect: "Allow"
                    Action:
                      - "s3:PutObject"
                    Resource:
                      Fn::Join:
                        - ""
                        - - "arn:aws:s3:::"
                          - "Ref" : "ServerlessDeploymentBucket"
                  - Effect: Allow
                    Action:
                      - dynamodb:GetItem
                    Resource: "arn:aws:dynamodb:us-east-1:891335278704:table/elections"
                  - Effect: Allow
                    Action:
                      - dynamodb:GetItem
                    Resource: "arn:aws:dynamodb:us-east-1:891335278704:table/electionKeys"
                  - Effect: Allow
                    Action:
                      - kms:Decrypt
                    Resource: "arn:aws:kms:us-east-1:891335278704:key/994f296e-ce2c-4f2b-8cef-48d16644af09"
                  - Effect: Allow
                    Action:
                      - dynamodb:PutItem
                    Resource: "arn:aws:dynamodb:us-east-1:891335278704:table/asyncJobs"
                  - Effect: Allow
                    Action:
                      - lambda:InvokeFunction
                    Resource: "arn:aws:lambda:us-east-1:891335278704:function:election-cast-vote"

    tallyElectionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /api/vote/cast/
        RoleName: TallyElectionRole_${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: tallyElectionPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                  - Effect: Allow 
                    Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    Resource: 
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                  - Effect: "Allow"
                    Action:
                      - "s3:PutObject"
                    Resource:
                      Fn::Join:
                        - ""
                        - - "arn:aws:s3:::"
                          - "Ref" : "ServerlessDeploymentBucket"
                  - Effect: Allow
                    Action:
                      - dynamodb:GetItem
                    Resource: "arn:aws:dynamodb:us-east-1:891335278704:table/elections"
                  - Effect: Allow
                    Action:
                      - dynamodb:PutItem
                    Resource: "arn:aws:dynamodb:us-east-1:891335278704:table/asyncJobs"
                  - Effect: Allow
                    Action:
                      - lambda:InvokeFunction
                    Resource: "arn:aws:lambda:us-east-1:891335278704:function:election-tally"


                    
